#!/usr/bin/env bash
THIS_DIR=$(dirname $BASH_SOURCE)
. "${THIS_DIR}"/pkg/assert/index.sh

CLI_PATH="${THIS_DIR}"/index.sh

( 
    . "${CLI_PATH}"
    log='test.log'

    echo > ${log}
    ( cli::if_tty_then_redirect_to_file 2 "${log}" )
    assert::empty_file_exists "${log}" "Redirect tty stderr to log file"

    rm "${log}" 2> /dev/null 
    ( cli::if_tty_then_redirect_to_file 3 "${log}" )
    assert::file_does_not_exist "${log}" "Do not redirect non-tty to log file"
)

(
    . "${CLI_PATH}"
    read line_number frame file < <(cli::callstack)
    assert::eq $(( LINENO - 1)) ${line_number}
    assert::eq 'main' ${frame}
    assert::eq "$0" "${file}"
)

(
    . "${CLI_PATH}"
    line_number=$(( LINENO + 1 ))
    cli::log_callstack 2>&1 > /dev/null \
        | assert::pipe_eq \
            'CALLSTACK:' \
            "    ${line_number} main $0"
)

(
    . "${CLI_PATH}"
    cli::indent <<< $(echo ok) \
        | assert::pipe_eq \
            '    ok'

    cli::unindent <<< $(echo '    ok') \
        | assert::pipe_eq \
            'ok'
)

# cli::tokenize << EOF
# Command
#     --ignore    : Not in an 'Arguments' section.

# Arguments
#     --run-as    : Run as the specified user.
#                   --ignore becuase of indentation

# Global Arguments
#     --debug     : Debug the script.
#     --help      : Show this message and exit.

# Example
#     --ignore    : Not in an 'Arguments' section.
# EOF

# unexpected_named_argument() { cli::declare 'foo'; }
# assert::fails unexpected_named_argument \
#     "fail on unexpected positional argument." \
#      >/dev/null 2>&1

# unexpected_named_argument() { cli::declare '--foo' 'bar'; }
# assert::fails unexpected_named_argument \
#     "fail on unexpected named argument." \
#      >/dev/null 2>&1

# declare_key_value() {
#     declare -g ARG_FOO
#     cli::declare '--foo' 'bar'
#     assert::eq "${ARG_FOO}" 'bar'
# }
# assert::ok declare_key_value "declare key/value."

# declare_flag() {
#     declare -g ARG_FLAG
#     cli::declare '--flag'
#     assert::eq "${ARG_FLAG}" true
# }
# assert::ok declare_flag "declare flag."

# assert::eq "$(cli::this_file)" "${BASH_SOURCE[0]}" \
#     "cli::this_file"

# assert::eq "$(cli::this_dir)" "$(dirname ${BASH_SOURCE[0]})" \
#     "cli::this_dir"

# assert::match $(cli::up_time) "T\+[0-9][0-9]:[0-9][0-9]:[0-9][0-9]" \
#     "cli::up_time format"

"${THIS_DIR}"/test/test "$@"