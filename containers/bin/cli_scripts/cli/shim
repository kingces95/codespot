#!/usr/bin/env bash

help() {
sed 's/^    //' << EOF
    Command
        cli shim

    Summary
        Prints the source for function 'shim'.
        
    Description

    Arguments

    Global Arguments
        --help -h       : Show this message and exit.
        --self-test     : Runs a self test.
EOF
}

main() {
    echo "help() { echo \"Unexpected missing 'help' in ${BASH_SOURCE[1]}.\"; }"
    echo "test() { return; }"
    declare -f shim
}

shim() {

    escape_args_then_call_as() {
        local user=$1
        shift

        local -a args
        for i in "$@"; do
            args+=( $(printf %q "${i}") )
        done

        sudo su "${user}" -c "${args[*]}"
    }

    # echo -- "${BASH_SOURCE[1]} :: ${FUNCNAME[1]}" "$@" > /dev/stderr

    # declare well known variables
    : ${arg_help:=false}
    : ${arg_tokenize_help:=false}
    : ${arg_parse_help:=false}
    : ${arg_self_test:=false}
    : ${arg_run_as:=}

    # resolve well known aliases
    if [[ "${1-}" == '-h' ]]; then
        set -- '--help'
    fi

    # declare variables passed via the command line    
    local name
    local value
    local args=( "$@" )
    until (( $# == 0 )); do
        name="$1"; shift

        # support flags; e.g. This '--help true' is the same '--help' 
        if (( $# == 0 )) || [[ "$1" == --* ]]; then
            value="true"
        else
            value="$1"; shift
        fi

        # map argument names to bash names; e.g. '--foo' ==> 'ARG_FOO'
        name="${name#--}"
        name="arg_${name/-/_}"

        # declare non-exported, but global, bash variables
        declare -g "${name}"="${value}"
    done

    # implement well known features
    if [[ -n "${arg_run_as}" ]] && [[ ! "${arg_run_as}" == "$(whoami)" ]]; then
        escape_args_then_call_as "${arg_run_as}" "$0" "${args[@]}"
    elif [[ "${arg_tokenize_help}" == 'true' ]]; then 
        help | cli dsl help tokenize
    elif [[ "${arg_parse_help}" == 'true' ]]; then 
        help | cli dsl help tokenize | cli dsl help parse
    elif [[ "${arg_help}" == 'true' ]]; then 
        help
    elif [[ "${arg_self_test}" == 'true' ]]; then 
        test
    else
        # *really* clean up
        unset name
        unset value
        unset args
        unset arg_run_as
        unset arg_help
        unset arg_tokenize_help
        unset arg_parse_help
        unset arg_self_test
        main
    fi
}

shim "$@"