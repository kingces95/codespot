#!/usr/bin/env bash
source /dev/stdin < <(cli shim)
. $(dirname ${BASH_SOURCE})/../cli.sh

help() {
util::unindent << EOF
    Command
        cli dsl compile

    Global Arguments
        --help -h               : Show this message and exit.
        --self-test             : Runs a self test.
EOF
}

error() { 
    yield "error" 
    yield "$1"
}

yield() { 
    echo "$@"
}

main() {
    local name=
    local -A arguments
    local -a allowed_values

    emit_body() {

        # productions are sorted (e.g. PRODUCTION_HELP_DEFAULT < PRODUCTION_ARG_VALUE)
        while read key production production_name identifier; do

            # declare a variable
            if (( production == PRODUCTION_HELP_NAME )); then
                name="${identifier}"
                arguments[${name}]=

            # ignore metadata mapping aliases
            elif (( production == PRODUCTION_HELP_ALIAS )); then
                continue

            # assign defaults
            elif (( production == PRODUCTION_HELP_DEFAULT )); then
                arguments[${name}]="${identifier}"

            # assert variables declared in help
            elif (( production == PRODUCTION_ARG_NAME )); then  
                if [[ ! "${arguments[${identifier}]+test}" ]]; then
                    error "Unexpected argument '--${identifier}'."
                    return
                fi

            # assert aliases declared in help
            elif (( production == PRODUCTION_ARG_ALIAS )); then
                error "Unexpected argument '-${identifier}'."
                return

            # assign a value from command line to a variable defined in help
            elif (( production == PRODUCTION_ARG_VALUE )); then
                arguments[${name}]="${identifier}"

                if [[ "${name}" == 'help' ]] && 
                    [[ "${identifier}" == 'true' ]]; then
                    break
                fi

            # assert required variables have a value
            elif (( production == PRODUCTION_HELP_REQUIRED )); then
                if [[ ! "${arguments[${name}]}" == ?* ]]; then
                    error "Missing required argument '--${name}'."
                    return
                fi

            # assert variables has an acceptable
            elif (( production == PRODUCTION_HELP_ALLOWED )); then
                allowed_values=()
            elif (( production == PRODUCTION_HELP_ALLOWED_VALUE )); then
                allowed_values+=( "${identifier}" )
            elif (( production == PRODUCTION_HELP_ALLOWED_END )); then
                blob="@(|${allowed_values[@]})"
                blob="${blob// /|}"

                if [[ ! "${arguments[${name}]}" == $blob ]]; then
                    error "Unexpected value '${arguments[${name}]}' for '--${name}' does not match '$blob'."
                    return
                fi

            else
                break
            fi
        done

        while true; do

            # publish path to command
            if (( production == PRODUCTION_ARG_FILE )); then
                yield "${identifier}"
                for i in "${!arguments[@]}"; do
                    # if [[ -z "${arguments[$i]}" ]]; then
                    #     continue
                    # fi

                    yield "--${i}"
                    yield "${arguments[$i]}"
                done

            # publish path of directory containing commands and groups
            elif (( production == PRODUCTION_ARG_DIR )); then
                error "production == PRODUCTION_ARG_DIR :: NYI"

            # propagate an error from an earlier stage of the pipeline
            elif (( production == PRODUCTION_ERROR )); then
                error "${identifier}"
                return
            fi

            # break once all productions have been read
            if ! read key production production_name identifier; then
                break
            fi
        done 
    }
    emit_body
}

test() (
    cd "$(dirname ${BASH_SOURCE})"

    # only '--help' and no defaults
    util::yield_args \
            . help sample --help \
        | "args/tokenize" \
        | "args/parse" \
        | "./load" \
        | "./patch" \
        | "./compile" \
        | assert::pipe_eq_exact \
            "./help/sample" \
            "--help" \
            "true"

    # defaults
    util::yield_args \
            . help sample -d \
        | "args/tokenize" \
        | "args/parse" \
        | "./load" \
        | "./patch" \
        | "./compile" \
        | assert::pipe_eq_exact \
            "./help/sample" \
            "--run-as" \
            "" \
            "--fruit" \
            "banana" \
            "--help" \
            "" \
            "--debug" \
            "true" 

    # acceptable value orange
    util::yield_args \
            . help sample --fruit orange -d \
        | "args/tokenize" \
        | "args/parse" \
        | "./load" \
        | "./patch" \
        | "./compile" \
        | assert::pipe_eq_exact \
            "./help/sample" \
            "--run-as"  \
            ""  \
            "--fruit" \
            "orange" \
            "--help" \
            ""  \
            "--debug" \
            "true"

    # unacceptable value apple
    util::yield_args \
            . help sample --fruit boo -d \
        | "args/tokenize" \
        | "args/parse" \
        | "./load" \
        | "./patch" \
        | "./compile" \
        | assert::pipe_eq_exact \
            "error" \
            "Unexpected value 'boo' for '--fruit' does not match '@(|banana|orange)'."

    # util::yield_args \
    #         . help \
    #     | "args/tokenize" \
    #     | "args/parse" \
    #     | "./load" \
    #     | "./patch" \
    #     | "./compile" \
    #     | assert::pipe_eq_exact \
    #         "echo" \
    #         "NYI"

    util::yield_args \
            . help --bad-arg \
        | "args/tokenize" \
        | "args/parse" \
        | "./load" \
        | "./patch" \
        | "./compile" \
        | assert::pipe_eq_exact \
            "error" \
            "Unexpected argument '--bad-arg'."

    util::yield_args \
            . help -b \
        | "args/tokenize" \
        | "args/parse" \
        | "./load" \
        | "./patch" \
        | "./compile" \
        | assert::pipe_eq_exact \
            "error" \
            "Unexpected argument '-b'."
)

shim "$@"