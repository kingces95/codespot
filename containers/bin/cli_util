#!/usr/bin/env bash
source /dev/stdin < <(cli loader)

help() {
    cat << EOF
Command
    cli_util

Global Arguments
    --help -h               : Show this message and exit.
EOF
}

main() { cli::export util; }
test() { return; }

# loader reflection
util::this_dir() { echo $(dirname ${BASH_SOURCE[1]}); }
util::this_file() { echo "${BASH_SOURCE[1]}"; }
util::this_function() { echo "${FUNCNAME[1]}"; }
util::caller_file() { echo "${BASH_SOURCE[2]}"; }
util::caller_dir() { echo $(dirname ${BASH_SOURCE[2]}); }

# basic initialize
util::initialize() {
    while (( $# > 0 )); do
        case $1 in
            '-h') arg_help=true ;;
            '--help') arg_help=true ;;
            '--self-test') arg_self_test=true ;;
            *) echo "Unexpected argument $1."; exit 1 ;;
        esac

        shift
    done
}

# error
util::on_exit() {
    local exit_code=$?

    if (( exit_code == 0 )); then
        return
    fi

    log_callstack

    echo ERROR: Exited with non-zero code: "${exit_code}"
    echo "$ cat ${LOG_FILE} | tail -n ${LOG_TAIL}"
    cat "${LOG_FILE}" \
        | tail -n "${LOG_TAIL}" \
        | util::indent

    if $help_on_exit; then
        echo "$(help)"
        exit
    fi

    return $exit_code
}
util::callstack() (
    i=0
    while caller $i; do 
        i=$(( i + 1 ))
    done 2>&1
)
util::log_callstack() {
    echo CALLSTACK: 
    util::callstack \
        | util::indent
}

# assert
util::assert() {
    local variable=$1
    local blob=$2
    local message=$3

    if [[ ! "${variable}" == $blob ]]; then
        error "${message}"
    fi
}

# reflection
util::is_set() {
    declare -p $1 >/dev/null 2>&1
}
util::is_true() {
    if util::is_set $1 && [[ ${!1} == 'true' ]]; then
        return 0
    else
        return 1
    fi
}

# profiling
util::pad() { printf "%02d" "$1"; }
util::time_up() {
    local duration=SECONDS
    local seconds=$((duration % 60))
    local minutes=$((duration / 60 % 60))
    local hours=$((duration / (60 * 60)))
    echo "T+$(util::pad ${hours}):$(util::pad ${minutes}):$(util::pad ${seconds})"
}

# declarations
util::declare_enums() {
    declare -n enum=$1

    for i in "${!enum[@]}"; do
        declare -gr "$1_${enum[$i]}"="$i"
    done
}

# streaming
util::indent() ( sed 's/^/    /'; )
util::unindent() ( sed 's/^    //'; )
util::skip() ( tail -n $(( $1 + 1 )); )

# invocation
util::yield_args() (
    while (( $# > 0 )); do
        echo "$1"
        shift
    done
)

initialize() {
    util::initialize "$@"
}

cli::load "$@"