#!/usr/bin/env bash
source /dev/stdin < <(cli loader)
. $(dirname ${BASH_SOURCE})/../../cli.sh

help() {
util::unindent << EOF
    Description
        Read command line arguments from stdin and emit tokens 
        to stdout one per line in the form:

            token_name line word [identifier]

        TOKEN_NAME matches '${CLI_DSL_ARG_NAME_GLOB}'.
        TOKEN_ALIAS matches '${CLI_DSL_ARG_ALIAS_GLOB}'.
        TOKEN_IDENTIFIER matches anything else that does not start
        with a dash, in which case TOKEN_ERROR is emitted.

    Global Arguments
        --help -h               : Show this message and exit.

    Examples
        Tokenize '-h'
            echo -h | tokenize
EOF
}

main() {
    local word_number=0
    local past_positional_args=false

    yield() {
        echo "${TOKENS[$1]}" '1' "${word_number}" ${2-''}
    }

    while IFS= read; do
        word_number=$(( word_number + 1 ))

        if [[ "${REPLY}" == $CLI_DSL_ARG_NAME_GLOB ]]; then
            yield "${TOKEN_NAME}" "${REPLY#--}"

        elif [[ "${REPLY}" == $CLI_DSL_ARG_ALIAS_GLOB ]]; then
            yield "${TOKEN_ALIAS}" "${REPLY#-}"

        elif [[ ! "${REPLY}" == -* ]]; then
            yield "${TOKEN_IDENTIFIER}" "${REPLY}"

        else
            yield "${TOKEN_ERROR}" \
                "Unexpected argument '${REPLY}'."
            exit
        fi
    done

    word_number=$(( word_number + 1 ))
    yield $TOKEN_EOF
}

self_test() (
    cd "$(dirname ${BASH_SOURCE})"

    util::yield_args \
            group cmd \
            --run-as myuser \
            --fruit banana \
            -h --debug \
        | "./tokenize" \
        | assert::pipe_eq \
            'TOKEN_IDENTIFIER 1 1 group' \
            'TOKEN_IDENTIFIER 1 2 cmd' \
            'TOKEN_NAME 1 3 run-as' \
            'TOKEN_IDENTIFIER 1 4 myuser' \
            'TOKEN_NAME 1 5 fruit' \
            'TOKEN_IDENTIFIER 1 6 banana' \
            'TOKEN_ALIAS 1 7 h' \
            'TOKEN_NAME 1 8 debug' \
            'TOKEN_EOF 1 9'

    util::yield_args \
            . / \
            group cmd \
            -run-as myuser \
        | "./tokenize" \
        | assert::pipe_eq \
            'TOKEN_IDENTIFIER 1 1 .' \
            'TOKEN_IDENTIFIER 1 2 /' \
            'TOKEN_IDENTIFIER 1 3 group' \
            'TOKEN_IDENTIFIER 1 4 cmd' \
            "TOKEN_ERROR 1 5 Unexpected argument '-run-as'."
)

cli::load "$@"