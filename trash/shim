#!/usr/bin/env bash

help() {
    cat << EOF
Command
    cli shim

Summary
    Bind to and invoke a command.

Consumer User Story
    As a script consumer, I want to deploy a single file packed with
    many commands. I want to specify the command I wish to invoke using
    the first arguments, and have the remaining key/value arguments passed 
    to the actual command. For example, given a cli 'integrate', to find 
    the area of a circle of radius 10 I want to execute:

        $ integrate area circle --radius 10

Developer User Story
    As a script developer, I want to develop each command in a file whose name
    matches the command name, and whose relative path from a desginated root 
    directory represent the group to which the command belongs. For example,
    given a root directory '/usr/bin/cli_scripts/integrate' the logic for command 
    'circle' in group 'area' would would live at:
    
        '/usr/bin/cli_scripts/integrate/area/circle'
    
    I want to create a "shim file" on the path (e.g. '/usr/bin/integrate') which 
    accepts the same arguments the user would pass, and uses the first arguments
    to construct a path to the file corrisponding to the command, and invokes that 
    command with the remaining key/value arguments. 

    I want to 'pack' all those commands into a single file for my consumers.

Description
    The first argument to the shim is a root directory, the next arguments 
    upto the first argument prefixed with a dash are joined with the root 
    directory to form the relative path. The remaing arguments are passed 
    to the invoked command. For example, to find the area of a circle with 
    radius 10, an call of:

        $ cli shim /usr/bin/cli_scipts/integrate area circle --radius 10

    would join '/usr/bin/cli_scipts/integrate', 'area', and 'circle' to form:

        /usr/bin/cli_scripts/integrate/area/circle

    and then invoke that command with the remaining arguments '--radius 10'.
    Conventionally, this logic would be put in a file 'integrate' which would 
    be put on the path. For example, '/usr/bin/integrate' would contain:

        #!/usr/bin/env bash
        cli shim "/usr/bin/cli_scipts/integrate" "\$@"
    
    Commands could then be hosted as files nested at '/usr/bin/cli_scipts/integrate' 
    whose sub-directories represent command groups. For example, command 'circle' 
    and 'square' in group 'area' would be hosted at:

        /usr/bin/cli_scripts/integrate/area/circle
        /usr/bin/cli_scripts/integrate/area/square

Description (packed)
    If the shim is invoked without any arguments, then it emits a function
    'cli::shim' (along with other internal functions and variables) that is
    suitable for including in a "packed" cli file. The first non key value 
    arguments passed to this version of the shim are joined with '::'. The
    the shim attempts to resolve that joined result to a function name in 
    the packed file. For example, after development of 'integrate', calling:

        $ cli pack \\
            --dir /usr/bin/cli_scripts/integrate \\
            --name integrate \\
            --output ./release

    would package all the commands into a single file './release/integrate'.
    To find the area of a circle using that command, the call is the same
    but internally all subsequent calls are made to functions within 
    './release/integarte'. For example,

        $ integrate area circle --radius 10

    would call:
        
        cli::development::shim area circle --radius 10 
        
    which would call:

        area::circle --radius 10
        
    which will contain the logic found in:

        /usr/bin/cli_scripts/integrate/area/circle

Global Arguments
    --help -h    [Flag] : Show this message and exit.
    --self-test  [Flag] : Runs a self test over all commands.

Examples
    Use the shim to print help for /usr/bin/base64
        cli shim /usr/bin base64 -h

    Use the shim to encode 'Hello World' in base 64
        echo Hello World | cli shim /usr/bin base64 -i -

    Print the shim that is included in packed files
        cli shim

    Create a cli 'sayhi' that speaks in english and french
        echo "#"'!'"/usr/bin/env bash" > sayhi
        cli shim >> sayhi
        echo "sayhi::english::speak() { echo Hi; }" >> sayhi
        echo "sayhi::french::speak() { echo Bonjour; }" >> sayhi
        echo "cli::development::shim sayhi \\\$@" >> sayhi
        chmod a+x sayhi
        ./sayhi english speak
        ./sayhi french speak
EOF
}

cli::shim::help() {
    cat << EOF
Command
    $1

Summary
    List available commands and groups.
    
Description
    Operations on a group of commands include listing sub-groups,
    commands, and both.

Arguments
    --list -l               : List commands and groups.
    --commands -c           : List commands.
    --groups -g             : List command groups.

Global Arguments
    --help -h        [Flag] : Show this message and exit.
EOF
}

# support [Params], unify paths + function names + library_name, support relative paths

# copied from 'loader'
set +m
set -e
set -u
shopt -s lastpipe
shopt -s globstar
shopt -s extglob
shopt -s nullglob

cli::shim::main() {    
    local CLI_SHIM_ARG_GLOB="-*"
    local CLI_SHIM_PATH_SEGMENT_GLOB="?([.])+([a-zA-Z0-9-])"

    # use filesystem to resolve command, and first argument is the 
    # base directory where commands are under development
    local delimiter=
    local -a args=()
    local dir=
    local path=

    # shift path root
    dir=$1; shift
    path="${dir}"

    # pick a path dilimiter
    cli::shim::is_packed && delimiter='::' || delimiter='/'

    # compose command path by consuming args upto first dash argument 
    while (( $# > 0 )); do

        # stop joining path segments if an argument is found (e.g. --foo)
        if [[ "$1" == $CLI_SHIM_ARG_GLOB ]]; then 
            break
        fi

        # ensure uniformity of group names (e.g. foo-bar, not foo_bar)
        if [[ ! "$1" == $CLI_SHIM_PATH_SEGMENT_GLOB ]]; then
            echo "Unexpected command name or group '$1' does not match '$CLI_SHIM_PATH_SEGMENT_GLOB'."
            exit 1
        fi

        # add path delimiter (e.g. '::' or '/')
        if [[ -n "${path}" ]]; then
            path="${path}${delimiter}"
        fi

        # convert command or group name into file or function name (e.g. foo-bar -> foo_bar)
        path="${path}${1//-/_}"
        shift

        # break if path is a command
        if cli::shim::is_command "${path}"; then 
            break
        fi
    done

    case "${1-}" in
        '---to-path')
            echo "${path}"
            exit
            ;;
    esac

    # file
    if cli::shim::is_command "${path}"; then

        case "${1-}" in
            # optimization
            '---which')
                echo "${path}" ;; 
            *)
                if ! declare -p CLI_LOADER_IMPORTS_EXPIRATION_PATH >/dev/null 2>&1; then
                    declare -xg CLI_LOADER_IMPORTS_EXPIRATION_PATH="$(mktemp "/tmp/cli.XXXXXX")"
                    trap cli::shim::on_exit EXIT
                fi
                "${path}" "$@" ;;
        esac

    # directory
    elif cli::shim::is_group "${path}"; then
        case "${1-}" in
            '-h') ;& '--help')
                cli::shim::help "${path}" ;; 
            '') 
                cli::shim::list "${path}" | sort ;;
            *)
                cli::shim::unexpected_argument "$@"
        esac

    # fail
    else
        cli::shim::command_not_found "${path#${dir}}"
    fi
}

cli::shim::on_exit() {
    rm "${CLI_LOADER_IMPORTS_EXPIRATION_PATH}"
}

cli::shim::is_command() {
    local path="$1"
    test -f "${path}" && test -x "${path}"
}

cli::shim::is_group() {
    local path="$1"
    test -d "${path}" && test -x "${path}"
}

cli::shim::is_packed() {
    false
}

cli::shim::list() (

    # include dot files
    local glob='* .[^.]*'

    cd "$1"

    # print '<type> <name>'
    for entry in ${glob}; do
        if [[ "${entry}" == '.cli' ]]; then continue; fi
        if [[ ! -f "${entry}" && ! -d "${entry}" ]]; then continue; fi
        if [[ ! -x "${entry}" ]]; then continue; fi

        # print type
        if [[ -f "${entry}" ]]; then
            echo -n 'c' # command
        elif [[ -d "${entry}" ]]; then 
            echo -n 'g' # group
        else 
            continue
        fi

        # print name
        echo " ${entry//_/-}"
    done
)

cli::shim::split() {
    set "${1//${delimiter}/ }"  # replace '::' or '/' with space
    set "${1//_/-}"             # replace '_' with '-'
    echo $1
}

cli::shim::unexpected_argument() {
    echo "Unexpected argument '$1'."
    exit 1
}

cli::shim::unexpected_argument_when_packed() {
    echo "Unexpected argument '$1' when already packed."
    exit 1
}

cli::shim::command_not_found() {
    echo "Command '$(cli::shim::split $1)' not found."
    exit 1
}

main() {

    cli::shim::is_packed() {
        true
    }

    declare -f cli::shim::main
    declare -f cli::shim::is_packed
    declare -f cli::shim::split
    declare -f cli::shim::unexpected_argument
    declare -f cli::shim::unexpected_argument_when_packed
    declare -f cli::shim::command_not_found

    # these functions generated during packing
    # declare -f cli::shim::is_command
    # declare -f cli::shim::is_group
    # declare -f cli::shim::list
}

# echo "$@" > /dev/stderr

case ${1-} in
    '') main ;;
    '-h') ;& '--help') help ;;
    '--self-test') ;;
    '---print') cat ${BASH_SOURCE} ;;
    '---which') echo ${BASH_SOURCE} ;;
    '---exports') main ;;
    '---initialize') echo '/dev/null' ;;
    '---imports') ;;
    -*) cli::shim::unexpected_argument "$1" ;;
    *) 
        cli::shim::main "$@" 
    ;;
esac
