#!/usr/bin/env bash
source $(cli loader)
cli::import cli_assert

help() {
    cat << EOF
Command
    ${CLI_COMMAND}

Summary
    Join a stream of path segments with a delimiter.

Description
    Joins a stream of segments into a path using a specified delimiter. Empty
    segments are ignored. Fails if any segements contain the delimiter.

Arguments
    --result -r               : Variable to store result. Default: RESULT.
    --delimiter -d [Required] : The delimiter used to join the records. Default: /.
    --base -b                 : The base is prepended to the joined segments. If the
                                base ends in a delimiter, then it will be reused.
    --absolute -a      [Flag] : Ensures the result begins with a delimiter.

Global Arguments
    --help -h    [Flag] : Show this message and exit.
    --self-test  [Flag] : Runs a self test over all commands.

Examples
    Join segments 'foo' 'bar' into '/foo/bar'
        ${CLI_COMMAND} <<< $'foo\nbar'

    Join segments '.foo-bar' into '/.foo_bar'
        ${CLI_COMMAND} --absolute <<< '.foo-bar'

    Join segments 'foo' 'bar' into '::foo::bar'
        ${CLI_COMMAND} --absolute --delimiter '::' <<< $'foo\nbar'

    Join base '/usr' with segments 'foo' 'bar' into '/usr/foo/bar'
        ${CLI_COMMAND} --base '/usr' <<< $'foo\nbar'

EOF
}

inline() {
    local -a _result=()
    local -n ref_result=${arg_result:-RESULT}

    : ${arg_delimiter:=/}
    : ${arg_base:=}
    : ${arg_absolute:=false}

    if ${arg_absolute} && [[ ! "${arg_base}" == ${arg_delimiter}* ]]; then
        arg_base="${arg_delimiter}${arg_base}"
    fi

    ref_result="${arg_base:-}"
    local args=( "$@" )

    while (( $# > 0 )); do

        if [[ "$1" =~ ${arg_delimiter} ]]; then
            cli::fail "Unexpected segment \"$1\"" \
            "containing delimiter \"${arg_delimiter}\"" \
            "found while joining segments \"${args[@]}\"."
        fi

        # if path does not end in a arg_delimiter, then add one
        if [[ -n "${ref_result}" && ! "${ref_result}" =~ .*${arg_delimiter}$ ]]; then
            ref_result="${ref_result}${arg_delimiter}"
        fi

        ref_result="${ref_result}$1"
        shift
    done
}

main() {
    declare RESULT

    mapfile -t
    inline "${MAPFILE[@]}"
    echo "${RESULT}"
}

self_test() {
    # join 'foo' and 'bar'
    ${CLI_COMMAND} <<< $'foo\nbar' \
        | assert::pipe_eq \
            'foo/bar'

    # join 'foo', '', 'bar'
    ${CLI_COMMAND} <<< $'foo\n\nbar' \
        | assert::pipe_eq \
            'foo/bar'

    # absolute
    ${CLI_COMMAND} --absolute <<< $'foo\nbar' \
        | assert::pipe_eq \
            '/foo/bar'

    # base as delimiter
    ${CLI_COMMAND} --base / <<< $'foo\nbar' \
        | assert::pipe_eq \
            '/foo/bar'

    # base as delimiter + absolute
    ${CLI_COMMAND} --absolute --base / <<< $'foo\nbar' \
        | assert::pipe_eq \
            '/foo/bar'
           
    # base
    ${CLI_COMMAND} --base usr <<< $'foo\nbar' \
        | assert::pipe_eq \
            'usr/foo/bar'

    # base that ends with a delimiter
    ${CLI_COMMAND} --base usr/ <<< $'foo\nbar' \
        | assert::pipe_eq \
            'usr/foo/bar'
            
    # absolute base
    ${CLI_COMMAND} --absolute --base usr <<< $'foo\nbar' \
        | assert::pipe_eq \
            '/usr/foo/bar'

    # absolute + base where base already absolute
    ${CLI_COMMAND} --absolute --base /usr <<< $'foo\nbar' \
        | assert::pipe_eq \
            '/usr/foo/bar'

    # custom delimiter
    ${CLI_COMMAND} --delimiter :: <<< $'foo\nbar' \
        | assert::pipe_eq \
            'foo::bar'

    # segment contains delimiter
    assert::fails "${CLI_COMMAND} <<< $'/foo/'"
}

cli::main "$@"
